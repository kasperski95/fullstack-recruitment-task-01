error: baza danych "TMP_DATABASE" nie istnieje {"timestamp":"2020-11-30 22:48:01","length":173,"name":"error","severity":"KATASTROFALNY","code":"3D000","file":"d:\\pginstaller_12.auto\\postgres.windows-x64\\src\\backend\\utils\\init\\postinit.c","line":"890","routine":"InitPostgres","stack":"error: baza danych \"TMP_DATABASE\" nie istnieje\n    at Parser.parseErrorMessage (C:\\Users\\arkad\\repos\\react-express-graphql-starter\\server\\node_modules\\pg-protocol\\src\\parser.ts:357:11)\n    at Parser.handlePacket (C:\\Users\\arkad\\repos\\react-express-graphql-starter\\server\\node_modules\\pg-protocol\\src\\parser.ts:186:21)\n    at Parser.parse (C:\\Users\\arkad\\repos\\react-express-graphql-starter\\server\\node_modules\\pg-protocol\\src\\parser.ts:101:30)\n    at Socket.<anonymous> (C:\\Users\\arkad\\repos\\react-express-graphql-starter\\server\\node_modules\\pg-protocol\\src\\index.ts:7:48)\n    at Socket.emit (events.js:315:20)\n    at addChunk (_stream_readable.js:309:12)\n    at readableAddChunk (_stream_readable.js:284:9)\n    at Socket.Readable.push (_stream_readable.js:223:10)\n    at TCP.onStreamRead (internal/stream_base_commons.js:188:23)","label":"mock"}
error: baza danych "TMP_DATABASE" nie istnieje {"timestamp":"2020-11-30 22:49:01","length":173,"name":"error","severity":"KATASTROFALNY","code":"3D000","file":"d:\\pginstaller_12.auto\\postgres.windows-x64\\src\\backend\\utils\\init\\postinit.c","line":"890","routine":"InitPostgres","stack":"error: baza danych \"TMP_DATABASE\" nie istnieje\n    at Parser.parseErrorMessage (C:\\Users\\arkad\\repos\\react-express-graphql-starter\\server\\node_modules\\pg-protocol\\src\\parser.ts:357:11)\n    at Parser.handlePacket (C:\\Users\\arkad\\repos\\react-express-graphql-starter\\server\\node_modules\\pg-protocol\\src\\parser.ts:186:21)\n    at Parser.parse (C:\\Users\\arkad\\repos\\react-express-graphql-starter\\server\\node_modules\\pg-protocol\\src\\parser.ts:101:30)\n    at Socket.<anonymous> (C:\\Users\\arkad\\repos\\react-express-graphql-starter\\server\\node_modules\\pg-protocol\\src\\index.ts:7:48)\n    at Socket.emit (events.js:315:20)\n    at addChunk (_stream_readable.js:309:12)\n    at readableAddChunk (_stream_readable.js:284:9)\n    at Socket.Readable.push (_stream_readable.js:223:10)\n    at TCP.onStreamRead (internal/stream_base_commons.js:188:23)","label":"mock"}
error: baza danych "TMP_DATABASE" nie istnieje {"timestamp":"2020-11-30 22:49:34","length":173,"name":"error","severity":"KATASTROFALNY","code":"3D000","file":"d:\\pginstaller_12.auto\\postgres.windows-x64\\src\\backend\\utils\\init\\postinit.c","line":"890","routine":"InitPostgres","stack":"error: baza danych \"TMP_DATABASE\" nie istnieje\n    at Parser.parseErrorMessage (C:\\Users\\arkad\\repos\\react-express-graphql-starter\\server\\node_modules\\pg-protocol\\src\\parser.ts:357:11)\n    at Parser.handlePacket (C:\\Users\\arkad\\repos\\react-express-graphql-starter\\server\\node_modules\\pg-protocol\\src\\parser.ts:186:21)\n    at Parser.parse (C:\\Users\\arkad\\repos\\react-express-graphql-starter\\server\\node_modules\\pg-protocol\\src\\parser.ts:101:30)\n    at Socket.<anonymous> (C:\\Users\\arkad\\repos\\react-express-graphql-starter\\server\\node_modules\\pg-protocol\\src\\index.ts:7:48)\n    at Socket.emit (events.js:315:20)\n    at addChunk (_stream_readable.js:309:12)\n    at readableAddChunk (_stream_readable.js:284:9)\n    at Socket.Readable.push (_stream_readable.js:223:10)\n    at TCP.onStreamRead (internal/stream_base_commons.js:188:23)","label":"mock"}
error: baza danych "TMP_DATABASE" nie istnieje {"timestamp":"2020-11-30 22:50:49","length":173,"name":"error","severity":"KATASTROFALNY","code":"3D000","file":"d:\\pginstaller_12.auto\\postgres.windows-x64\\src\\backend\\utils\\init\\postinit.c","line":"890","routine":"InitPostgres","stack":"error: baza danych \"TMP_DATABASE\" nie istnieje\n    at Parser.parseErrorMessage (C:\\Users\\arkad\\repos\\react-express-graphql-starter\\server\\node_modules\\pg-protocol\\src\\parser.ts:357:11)\n    at Parser.handlePacket (C:\\Users\\arkad\\repos\\react-express-graphql-starter\\server\\node_modules\\pg-protocol\\src\\parser.ts:186:21)\n    at Parser.parse (C:\\Users\\arkad\\repos\\react-express-graphql-starter\\server\\node_modules\\pg-protocol\\src\\parser.ts:101:30)\n    at Socket.<anonymous> (C:\\Users\\arkad\\repos\\react-express-graphql-starter\\server\\node_modules\\pg-protocol\\src\\index.ts:7:48)\n    at Socket.emit (events.js:315:20)\n    at addChunk (_stream_readable.js:309:12)\n    at readableAddChunk (_stream_readable.js:284:9)\n    at Socket.Readable.push (_stream_readable.js:223:10)\n    at TCP.onStreamRead (internal/stream_base_commons.js:188:23)","label":"mock"}
silly: All classes found using provided glob pattern "./src/entities/*.ts" : "src/entities/user.ts" {"timestamp":"2020-11-30 22:51:47","label":"typeorm"}
silly: START TRANSACTION  {"timestamp":"2020-11-30 22:51:47","label":"typeorm"}
silly: SELECT * FROM current_schema()  {"timestamp":"2020-11-30 22:51:47","label":"typeorm"}
silly: SELECT * FROM "information_schema"."tables" WHERE ("table_schema" = 'public' AND "table_name" = 'user')  {"timestamp":"2020-11-30 22:51:47","label":"typeorm"}
silly: SELECT *, ('"' || "udt_schema" || '"."' || "udt_name" || '"')::"regtype" AS "regtype" FROM "information_schema"."columns" WHERE ("table_schema" = 'public' AND "table_name" = 'user')  {"timestamp":"2020-11-30 22:51:47","label":"typeorm"}
silly: SELECT "ns"."nspname" AS "table_schema", "t"."relname" AS "table_name", "cnst"."conname" AS "constraint_name", pg_get_constraintdef("cnst"."oid") AS "expression", CASE "cnst"."contype" WHEN 'p' THEN 'PRIMARY' WHEN 'u' THEN 'UNIQUE' WHEN 'c' THEN 'CHECK' WHEN 'x' THEN 'EXCLUDE' END AS "constraint_type", "a"."attname" AS "column_name" FROM "pg_constraint" "cnst" INNER JOIN "pg_class" "t" ON "t"."oid" = "cnst"."conrelid" INNER JOIN "pg_namespace" "ns" ON "ns"."oid" = "cnst"."connamespace" LEFT JOIN "pg_attribute" "a" ON "a"."attrelid" = "cnst"."conrelid" AND "a"."attnum" = ANY ("cnst"."conkey") WHERE "t"."relkind" = 'r' AND (("ns"."nspname" = 'public' AND "t"."relname" = 'user'))  {"timestamp":"2020-11-30 22:51:47","label":"typeorm"}
silly: SELECT "ns"."nspname" AS "table_schema", "t"."relname" AS "table_name", "i"."relname" AS "constraint_name", "a"."attname" AS "column_name", CASE "ix"."indisunique" WHEN 't' THEN 'TRUE' ELSE'FALSE' END AS "is_unique", pg_get_expr("ix"."indpred", "ix"."indrelid") AS "condition", "types"."typname" AS "type_name" FROM "pg_class" "t" INNER JOIN "pg_index" "ix" ON "ix"."indrelid" = "t"."oid" INNER JOIN "pg_attribute" "a" ON "a"."attrelid" = "t"."oid"  AND "a"."attnum" = ANY ("ix"."indkey") INNER JOIN "pg_namespace" "ns" ON "ns"."oid" = "t"."relnamespace" INNER JOIN "pg_class" "i" ON "i"."oid" = "ix"."indexrelid" INNER JOIN "pg_type" "types" ON "types"."oid" = "a"."atttypid" LEFT JOIN "pg_constraint" "cnst" ON "cnst"."conname" = "i"."relname" WHERE "t"."relkind" = 'r' AND "cnst"."contype" IS NULL AND (("ns"."nspname" = 'public' AND "t"."relname" = 'user'))  {"timestamp":"2020-11-30 22:51:47","label":"typeorm"}
silly: SELECT "con"."conname" AS "constraint_name", "con"."nspname" AS "table_schema", "con"."relname" AS "table_name", "att2"."attname" AS "column_name", "ns"."nspname" AS "referenced_table_schema", "cl"."relname" AS "referenced_table_name", "att"."attname" AS "referenced_column_name", "con"."confdeltype" AS "on_delete", "con"."confupdtype" AS "on_update", "con"."condeferrable" AS "deferrable", "con"."condeferred" AS "deferred" FROM ( SELECT UNNEST ("con1"."conkey") AS "parent", UNNEST ("con1"."confkey") AS "child", "con1"."confrelid", "con1"."conrelid", "con1"."conname", "con1"."contype", "ns"."nspname", "cl"."relname", "con1"."condeferrable", CASE WHEN "con1"."condeferred" THEN 'INITIALLY DEFERRED' ELSE 'INITIALLY IMMEDIATE' END as condeferred, CASE "con1"."confdeltype" WHEN 'a' THEN 'NO ACTION' WHEN 'r' THEN 'RESTRICT' WHEN 'c' THEN 'CASCADE' WHEN 'n' THEN 'SET NULL' WHEN 'd' THEN 'SET DEFAULT' END as "confdeltype", CASE "con1"."confupdtype" WHEN 'a' THEN 'NO ACTION' WHEN 'r' THEN 'RESTRICT' WHEN 'c' THEN 'CASCADE' WHEN 'n' THEN 'SET NULL' WHEN 'd' THEN 'SET DEFAULT' END as "confupdtype" FROM "pg_class" "cl" INNER JOIN "pg_namespace" "ns" ON "cl"."relnamespace" = "ns"."oid" INNER JOIN "pg_constraint" "con1" ON "con1"."conrelid" = "cl"."oid" WHERE "con1"."contype" = 'f' AND (("ns"."nspname" = 'public' AND "cl"."relname" = 'user')) ) "con" INNER JOIN "pg_attribute" "att" ON "att"."attrelid" = "con"."confrelid" AND "att"."attnum" = "con"."child" INNER JOIN "pg_class" "cl" ON "cl"."oid" = "con"."confrelid" INNER JOIN "pg_namespace" "ns" ON "cl"."relnamespace" = "ns"."oid" INNER JOIN "pg_attribute" "att2" ON "att2"."attrelid" = "con"."conrelid" AND "att2"."attnum" = "con"."parent"  {"timestamp":"2020-11-30 22:51:47","label":"typeorm"}
silly: SELECT * FROM "information_schema"."tables" WHERE "table_schema" = current_schema() AND "table_name" = 'typeorm_metadata'  {"timestamp":"2020-11-30 22:51:47","label":"typeorm"}
info: creating a new table: user {"timestamp":"2020-11-30 22:51:47","label":"typeorm"}
silly: CREATE TABLE "user" ("id" SERIAL NOT NULL, "email" character varying NOT NULL, "password" character varying NOT NULL, "role" text NOT NULL, CONSTRAINT "PK_cace4a159ff9f2512dd42373760" PRIMARY KEY ("id"))  {"timestamp":"2020-11-30 22:51:47","label":"typeorm"}
silly: CREATE UNIQUE INDEX "IDX_e12875dfb3b1d92d7d7c5377e2" ON "user" ("email")   {"timestamp":"2020-11-30 22:51:47","label":"typeorm"}
silly: COMMIT  {"timestamp":"2020-11-30 22:51:47","label":"typeorm"}
silly: START TRANSACTION  {"timestamp":"2020-11-30 22:51:47","label":"typeorm"}
silly: INSERT INTO "user"("email", "password", "role") VALUES ($1, $2, $3) RETURNING "id" Parameters: user@gmail.com,$2b$10$XR0JZ/QG8NWTb2tTNTgmhextn9dOLZoGBB77q.Jv3SY20lv5fFzky,default {"timestamp":"2020-11-30 22:51:47","label":"typeorm"}
silly: COMMIT  {"timestamp":"2020-11-30 22:51:47","label":"typeorm"}
